@inherits UmbracoViewPage
@using ContentModels = Umbraco.Cms.Web.Common.PublishedModels
@using Umbraco.Cms.Core.Models.Blocks;

@{
    var homePage = Model.AncestorOrSelf<ContentModels.Home>();

    var logo = Model.Value<Umbraco.Cms.Core.Models.MediaWithCrops>("companyLogo", fallback: Fallback.ToAncestors);

    if (logo == null || string.IsNullOrEmpty(logo.MediaUrl()))
    {

    }
    var variants = Model.Value<IEnumerable<BlockListItem>>("navigation", fallback: Fallback.ToAncestors).Select(x => x.Content);
}

<div class="navbar-logo-left">
    <div data-animation="default"
         data-collapse="medium"
         data-duration="400"
         data-easing="ease"
         data-easing2="ease"
         role="banner"
         class="navbar-logo-left-container shadow-three w-nav">
        <div>
            <div class="navbar-wrapper">
                <a href="/"
                   aria-current="page"
                   class="navbar-brand w-nav-brand w--current"
                   aria-label="home">
                    @if (logo == null || string.IsNullOrEmpty(logo.MediaUrl()))
                    {
                        <img class="nav-logo" src="~/media/0w3fb02y/sample-logo.png" alt="sffaii logo" />
                    }
                    else
                    {
                        <img class="nav-logo" src="@logo.Url()" alt="sffaii logo" width="100%" height="65"/>
                    }
                </a>
                <nav role="navigation" class="nav-menu-wrapper w-nav-menu">
                    <ul role="list" class="nav-menu-two w-list-unstyled">


                        @if (variants != null)
                        {
                            foreach (var variant in variants)
                            {
                                var variants2 = variant.Value<IEnumerable<BlockListItem>>("secondaryLinks")
                                ?.Select(x => x.Content)
                                ?.ToList();


                                var primaryLinkNewTab = variant?.Value("openNewTab")?.ToString();

                                <li class="list-item @(variants2 != null && variants2.Any() ? "dropdown" : "")">
                                    @if (variants2 != null && variants2.Any())
                                    {
                                        <a class="nav-link-2 w--current @(variants2 != null && variants2.Any() ? "dropdown-toggle" : "")" target="@(primaryLinkNewTab == "True" ? "_blank" : "")"
                                           href="@variant.Value("link")" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                                            @variant.Value("primaryLink")
                                        </a>
                                    }
                                    else
                                    {
                                        <a class="nav-link-2 w--current @(variants2 != null && variants2.Any() ? "dropdown-toggle" : "")" target="@(primaryLinkNewTab == "True" ? "_blank" : "")"
                                           href="@variant.Value("link")" role="button">
                                            @variant.Value("primaryLink")
                                        </a>
                                    }


                                    @if (variants2 != null && variants2.Any())
                                    {
                                        <ul class="dropdown-menu dropdown-menu-end navbar__sub--items" aria-labelledby="navbarDropdownBlog">
                                            @foreach (var variant2 in variants2)
                                            {
                                                var secondaryLinkNewTab = variant2.Value("openNewTab").ToString();
                                                <li>
                                                    <a class="dropdown-item" href="@variant2.Value("link")" target="@(secondaryLinkNewTab == "True" ? "_blank" : "")">
                                                        @variant2.Value("secondaryLink")
                                                    </a>
                                                </li>
                                            }
                                        </ul>
                                    }
                                </li>
                            }
                        }
                    </ul>
                </nav>
                <div class="menu-button w-nav-button"
                     style="-webkit-user-select: text"
                     aria-label="menu"
                     role="button"
                     tabindex="0"
                     aria-controls="w-nav-overlay-0"
                     aria-haspopup="menu"
                     aria-expanded="false">
                    <div class="w-icon-nav-menu"></div>
                </div>
                <div class="mobile-menu" id="mobileMenu">
                    <ul>
                         @if (variants != null)
                        {
                            foreach (var variant in variants)
                            {
                                var variants2 = variant.Value<IEnumerable<BlockListItem>>("secondaryLinks")
                                ?.Select(x => x.Content)
                                ?.ToList();

                                var primaryLinkNewTab = variant?.Value("openNewTab")?.ToString();
                            <li class=" @(variants2 != null && variants2.Any() ? "dropdown" : "")">
                                @if (variants2 != null && variants2.Any())
                                {
                           
                                <a class="mobile-nav-link-2 w--current @(variants2 != null && variants2.Any() ? "dropdown-toggle" : "")" target="@(primaryLinkNewTab == "True" ? "_blank" : "")" href="@variant.Value("link")" role="button" data-bs-toggle="dropdown" aria-expanded="false"> 
                                   @variant.Value("primaryLink")
                                </a>
                            
                                }
                                else
                                {
                                    <a class="mobile-nav-link-2 w--current @(variants2 != null && variants2.Any() ? "dropdown-toggle" : "")" target="@(primaryLinkNewTab == "True" ? "_blank" : "")"
                                       href="@variant.Value("link")" role="button">
                                        @variant.Value("primaryLink")
                                    </a>
                                }
                                    @if (variants2 != null && variants2.Any())
                                    {
                                        <ul class="mobile-dropdown-menu mobile-navbar__sub--items" aria-labelledby="">
                                            @foreach (var variant2 in variants2)
                                            {
                                                var secondaryLinkNewTab = variant2.Value("openNewTab").ToString();
                                                <li>
                                                    <a class="mobile-dropdown-item" href="@variant2.Value("link")" target="@(secondaryLinkNewTab == "True" ? "_blank" : "")">
                                                        @variant2.Value("secondaryLink")
                                                    </a>
                                                </li>
                                            }
                                        </ul>
                                    }
                                   
                            </li>
                                   
                            }
                        }
                    </ul>
                </div>
            </div>
        </div>
        <div class="w-nav-overlay" data-wf-ignore="" id="w-nav-overlay-0"></div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        const menuButton = document.querySelector(".menu-button");
        const mobileMenu = document.getElementById("mobileMenu");
        const dropdownToggles = document.querySelectorAll(".dropdown-toggle");

        // Toggle Mobile Menu
        menuButton.addEventListener("click", function () {
            mobileMenu.classList.toggle("active");
        });

        // Loop through dropdown toggles
        dropdownToggles.forEach(toggle => {
            const dropdownMenu = toggle.nextElementSibling;

            if (dropdownMenu && dropdownMenu.classList.contains("mobile-dropdown-menu")) {
                // Create new li element
                const newLi = document.createElement("li");

                // Create a new anchor tag with the same properties as the original link
                const newLink = document.createElement("a");
                newLink.className = "mobile-dropdown-item"; // Same styling as other dropdown items
                newLink.href = toggle.href;
                newLink.textContent = toggle.textContent;

                // Append link inside new li
                newLi.appendChild(newLink);

                // Insert as first child of dropdown menu
                dropdownMenu.insertBefore(newLi, dropdownMenu.firstChild);
            }

              if (dropdownMenu.classList.contains("dropdown-menu")) {
                // Create a new anchor tag with the same properties as the original link
                const newLinkDev = document.createElement("a");
                newLinkDev.className = "desktop-nav-link"; // Same styling as other dropdown items
                newLinkDev.href = toggle.href;
                newLinkDev.textContent = toggle.textContent;

                // Insert as first child of dropdown menu
                dropdownMenu.insertBefore(newLinkDev, dropdownMenu.firstChild);
            }

            // Toggle Dropdown Menus
            toggle.addEventListener("click", function (event) {
                event.preventDefault(); // Prevent default link action
                dropdownMenu.classList.toggle("active");
            });
        });
    });
</script>



            